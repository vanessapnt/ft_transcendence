# Définition des upstreams (services backend)
upstream frontend {
    server frontend:3000;
}

upstream backend {
    server backend:8000;
}

# SERVEUR HTTP - Redirection vers HTTPS
server {
    listen 80;                    # Écoute sur le port 80 (HTTP)
    server_name localhost;
    
    # Redirection permanente (301) vers HTTPS
    # $server_name = localhost
    # $request_uri = chemin complet de la requête (/api/users?id=1)
    return 301 https://$server_name$request_uri;
}

# SERVEUR HTTPS - Configuration principale
server {
    listen 443 ssl http2;        # Écoute sur port 443 avec SSL et HTTP/2
    server_name localhost;

    # Configuration des certificats SSL
    ssl_certificate /etc/nginx/ssl/server.crt;        # Certificat public
    ssl_certificate_key /etc/nginx/ssl/server.key;    # Clé privée

    # Headers de sécurité HTTP
    # HSTS : Force HTTPS pendant 1 an, inclut les sous-domaines
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    
    # X-Frame-Options : Empêche l'intégration dans des iframes (protection clickjacking)
    add_header X-Frame-Options DENY always;
    
    # X-Content-Type-Options : Empêche le sniffing MIME
    add_header X-Content-Type-Options nosniff always;
    
    # X-XSS-Protection : Active la protection XSS du navigateur
    add_header X-XSS-Protection "1; mode=block" always;
    
    # Referrer-Policy : Contrôle les informations de référence
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;

    # Configuration des logs
    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log;

    # Health check - Point de contrôle de santé
    location /health {
        access_log off;                           # Pas de logs pour le health check
        return 200 "healthy\n";                  # Retourne toujours 200 OK
        add_header Content-Type text/plain;      # Type de contenu
    }

    # Backend API - Toutes les routes /api/*
    location /api/ {
        proxy_pass http://backend;               # Redirige vers l'upstream backend
        
        # Headers de proxy essentiels
        proxy_set_header Host $host;                                    # Conserve l'hostname original
        proxy_set_header X-Real-IP $remote_addr;                      # IP réelle du client
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  # Chain des IPs
        proxy_set_header X-Forwarded-Proto $scheme;                   # Protocole (https)
        proxy_set_header X-Forwarded-Host $host;                      # Host original
        proxy_set_header X-Forwarded-Port $server_port;               # Port (443)
        
        # Support WebSocket pour les APIs temps réel
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        
        # Timeouts pour éviter les blocages
        proxy_connect_timeout 60s;              # Timeout de connexion
        proxy_send_timeout 60s;                 # Timeout d'envoi
        proxy_read_timeout 60s;                 # Timeout de lecture
    }

    # Frontend - Application principale (Pong game)
    location / {
        proxy_pass http://frontend;             # Redirige vers l'upstream frontend
        
        # Headers de proxy (identiques au backend)
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $server_port;
        
        # Support WebSocket (essentiel pour React/Vue hot reload)
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        
        # Cache bypass pour le développement
        proxy_cache_bypass $http_upgrade;
        
        # Timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }
}