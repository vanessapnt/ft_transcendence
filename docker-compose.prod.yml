services:
  frontend:
    build: ./frontend
    environment:
      - NODE_ENV=production
    networks:
      - transcendence-network
    restart: unless-stopped

  backend:
    build: ./backend
    environment:
      - NODE_ENV=production
    networks:
      - transcendence-network
    restart: unless-stopped

  nginx:
    build: ./nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - frontend
      - backend
    volumes:
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - transcendence-network
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    environment:
      - NGINX_LOG_LEVEL=warn

  # ==== ELK Stack Production ====
  # Elasticsearch (stockage et indexation des logs)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.15.0
    container_name: elasticsearch-prod
    restart: unless-stopped
    ports:
      - "127.0.0.1:9200:9200"  
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g" 
      - xpack.security.enabled=false
      - cluster.name=transcendence-prod
      - node.name=transcendence-node-prod
      - logger.level=WARN
    volumes:
      - elasticsearch_prod_data:/usr/share/elasticsearch/data
    networks:
      - transcendence-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Logstash (traitement et enrichissement des logs)
  logstash:
    image: docker.elastic.co/logstash/logstash:7.15.0
    container_name: logstash-prod
    restart: unless-stopped
    ports:
      - "127.0.0.1:5044:5044"  # Beats input (localhost seulement)
      - "127.0.0.1:5001:5000/tcp"  # TCP input (localhost seulement)
      - "127.0.0.1:9600:9600"  # API Logstash (localhost seulement)
    environment:
      LS_JAVA_OPTS: "-Xmx512m -Xms512m"  # Plus de RAM en prod
      LOG_LEVEL: "warn"
    volumes:
      - ./elk/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
      - ./elk/logstash/pipeline:/usr/share/logstash/pipeline:ro
    networks:
      - transcendence-network
    depends_on:
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9600 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Kibana (interface de visualisation des logs)
  kibana:
      image: docker.elastic.co/kibana/kibana:7.15.0
      container_name: kibana-prod
      restart: unless-stopped
      ports:
        - "127.0.0.1:5601:5601"
      environment:
        ELASTICSEARCH_HOSTS: http://elasticsearch:9200
        SERVER_NAME: "transcendence-kibana-prod"
        LOGGING_QUIET: "true"
        ELASTICSEARCH_USERNAME: ""
        ELASTICSEARCH_PASSWORD: ""
      networks:
        - transcendence-network
      depends_on:
        elasticsearch:
          condition: service_healthy
      healthcheck:
        test: ["CMD-SHELL", "curl -f http://localhost:5601/api/status || exit 1"]
        interval: 30s
        timeout: 10s
        retries: 3
        start_period: 90s
      logging:
        driver: "json-file"
        options:
          max-size: "10m"
          max-file: "3"

  # === Monitoring (module minor)
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus-prod
    restart: unless-stopped
    ports:
      - "127.0.0.1:9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--log.level=warn'
    networks:
      - transcendence-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  grafana:
    image: grafana/grafana:latest
    container_name: grafana-prod
    restart: unless-stopped
    ports:
      - "127.0.0.1:3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: transcendence123
      GF_USERS_ALLOW_SIGN_UP: false
      GF_LOG_LEVEL: warn
    networks:
      - transcendence-network
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter-prod
    restart: unless-stopped
    ports:
      - "127.0.0.1:9100:9100"
    volumes:
      # ⚠️ Accès aux infos système du HOST
      - /proc:/host/proc:ro          # ← Processus système
      - /sys:/host/sys:ro            # ← Infos hardware
      - /:/rootfs:ro                 # ← Filesystem complet
    command:
      # Configuration pour Docker
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
      - '--log.level=warn'
    networks:
      - transcendence-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9100/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Service d'initialisation automatique de Kibana
  kibana-init:
    image: alpine/curl:latest
    container_name: kibana-init-prod
    restart: "no"
    volumes:
      - ./elk/kibana/init-kibana.sh:/scripts/init-kibana.sh:ro
    networks:
      - transcendence-network
    depends_on:
      kibana:
        condition: service_healthy
    command: sh /scripts/init-kibana.sh

volumes:
  nginx_logs:
  elasticsearch_prod_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data: 
    driver: local

networks:
  transcendence-network:
    driver: bridge