services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    ports:
      - "3000:3000"
    volumes:
      # Hot reload : les changements TypeScript sont compilés automatiquement
      - ./frontend/pong:/app/pong:delegated
      - ./frontend/tsconfig.json:/app/tsconfig.json:ro
      - ./frontend/package.json:/app/package.json:ro
      # Exclure node_modules pour éviter les conflits
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - CHOKIDAR_USEPOLLING=true
    networks:
      - transcendence-network
    stdin_open: true
    tty: true
    stop_grace_period: 2s

  backend:
    build: ./backend
    ports:
      - "8000:8000"
    volumes:
      # Hot reload pour backend
      - ./backend:/app
    networks:
      - transcendence-network

  nginx:
    build: ./nginx
    ports:
      - "80:80"
    depends_on:
      - frontend
      - backend
    networks:
      - transcendence-network

  # ==== Major module: Infrastructure setup for log management. ====
  # Elasticsearch (récupère tous les logs du projet)
  elasticsearch:
    image:  docker.elastic.co/elasticsearch/elasticsearch:7.15.0
    container_name: elasticsearch
    restart: always
    ports:
      - "9200:9200"
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks: 
      - transcendence-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
  
  # Logstash (rend les logs plus clairs et riches)
  logstash:
    image: docker.elastic.co/logstash/logstash:7.15.0
    container_name: logstash
    restart: always
    ports:
      - "5044:5044"
      - "5001:5000/tcp"
      - "9600:9600"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    volumes:
      - ./elk/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
      - ./elk/logstash/pipeline:/usr/share/logstash/pipeline:ro
    networks:
      - transcendence-network
    depends_on:
      - elasticsearch
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
  
  # Kibana (interface de visualisation des logs)
  kibana:
    image: docker.elastic.co/kibana/kibana:7.15.0
    container_name: kibana
    restart: always
    ports: 
      - "5601:5601"
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
      SERVER_NAME: "transcendence-kibana"
    networks:
      - transcendence-network
    depends_on:
      elasticsearch:
        condition: service_healthy  # ✅ Attendre qu'ES soit prêt
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5601/api/status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 90s

volumes:
  elasticsearch_data:

networks:
  transcendence-network:
    driver: bridge