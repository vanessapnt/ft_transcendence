# Makefile pour le projet transcendence

.PHONY: dev prod stop build clean logs help

# Commandes par d√©faut
help:
	@echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
	@echo "‚ïë     üéÆ Transcendence - Commandes disponibles üéÆ  ‚ïë"
	@echo "‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£"
	@echo "‚ïë  make dev    ‚Üí Lancer en mode d√©veloppement      ‚ïë"
	@echo "‚ïë  make prod   ‚Üí Lancer en mode production         ‚ïë"
	@echo "‚ïë  make stop   ‚Üí Arr√™ter les services              ‚ïë"
	@echo "‚ïë  make build  ‚Üí Rebuilder les images              ‚ïë"
	@echo "‚ïë  make clean  ‚Üí Nettoyer tout (volumes inclus)    ‚ïë"
	@echo "‚ïë  make logs   ‚Üí Afficher les logs                 ‚ïë"
	@echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"

# Mode d√©veloppement
dev:
	@echo "üöÄ D√©marrage en mode d√©veloppement..."
	docker-compose -f docker-compose.dev.yml up

# Mode d√©veloppement avec initialisation Kibana
dev-init:
	@echo "üöÄ D√©marrage en mode d√©veloppement avec init Kibana..."
	@echo "üõë Arr√™t des services existants..."
	-docker-compose -f docker-compose.dev.yml down 2>/dev/null
	@echo "üîÑ D√©marrage de l'environnement complet..."
	docker-compose -f docker-compose.dev.yml up -d
	@echo "‚úÖ Environnement pr√™t ! Dashboard Kibana en cours d'initialisation..."
	@echo "üåê Frontend: http://localhost:3000"
	@echo "üåê Backend: http://localhost:5000"
	@echo "üìä Kibana: http://localhost:5601"

# Mode production
prod:
	@echo "üöÄ D√©marrage en mode production..."
	docker-compose -f docker-compose.prod.yml up -d

# Arr√™ter les services
stop:
	@echo "üõë Arr√™t des services..."
	-docker-compose -f docker-compose.dev.yml down 2>/dev/null
	-docker-compose -f docker-compose.prod.yml down 2>/dev/null

# Rebuilder les images
build:
	@echo "üî® Reconstruction des images..."
	docker-compose -f docker-compose.dev.yml build --no-cache

# Nettoyer tout
clean:
	@echo "üßπ Nettoyage complet..."
	-docker-compose -f docker-compose.dev.yml down -v --remove-orphans 2>/dev/null
	-docker-compose -f docker-compose.prod.yml down -v --remove-orphans 2>/dev/null
	docker system prune -f
	@echo "‚ú® Nettoyage termin√© !"

# Afficher les logs
logs:
	docker-compose -f docker-compose.dev.yml logs -f

# Nettoyer les fichiers JS g√©n√©r√©s localement
clean-js:
	@echo "üßπ Nettoyage des fichiers JS compil√©s..."
	find ./frontend/pong -name "*.js" -not -name "first_pong.js" -delete
	find ./frontend/pong -name "*.js.map" -delete
	find ./frontend/pong -name "*.d.ts" -delete
	@echo "‚ú® Fichiers JS nettoy√©s !"